from utils import args_formatter, roundup
from variables import parameters_value


class Vulnerability:
    def __init__(self, tab: list):
        """
        Parameters are private because user doesn't have to change parameters
        TODO: we can change this but i have to build new method to check the validity of new parameters
        :param tab:
        """
        args_formatter(tab)
        self.__AV = tab[0]
        self.__AC = tab[1]
        self.__PR = tab[2]
        self.__UI = tab[3]
        self.__S = tab[4]
        self.__CI = tab[5]
        self.__II = tab[6]
        self.__AI = tab[7]

        self.__exploitability = 0.
        self.__calculate_exploitability()
        self.__impact = 0.
        self.__calculate_impact()
        self.__basescore = 0.
        self.__calculate_basescore()

    def can_chain_with(self, other_vuln) -> bool:
        """
        Check if we vulnerability can be neighbour in a chain
        :param other_vuln:
        :return:
        """
        check_vector = False
        if self.__AV == "network":
            if other_vuln.__AV == "local" or other_vuln.__AV == "network":
                check_vector = True

        if self.__AV == "adjacent_network":
            if other_vuln.__AV == "local" or other_vuln.__AV == "adjacent_network":
                check_vector = True

        if self.__AV == "local":
            if other_vuln.__AV == "local":
                check_vector = True

        check_perm = False

        if self.__PR == "none":
            check_perm = other_vuln.__PR == "none" or other_vuln.__PR == "low"

        if self.__PR == "low":
            check_perm = other_vuln.__PR == "low" or other_vuln.__PR == "high"

        if self.__PR == "high":
            check_perm = other_vuln.__PR == "high"

        return check_vector and check_perm

    def __calculate_exploitability(self):
        """
        Calculate exploitability
        """
        # before calculating exploitability we have to check the scope
        # for the value of PrivilegeRequired
        if self.__S == "changed":
            parameters_value["PrivilegesRequired"]["low"] = 0.68
            parameters_value["PrivilegesRequired"]["high"] = 0.5
        elif self.__S == "unchanged":
            parameters_value["PrivilegesRequired"]["low"] = 0.62
            parameters_value["PrivilegesRequired"]["high"] = 0.27

        self.__exploitability = 8.22 * parameters_value["AttackVector"][self.__AV] \
                                * parameters_value["AttackComplexity"][self.__AC] \
                                * parameters_value["PrivilegesRequired"][self.__PR] \
                                * parameters_value["UserInteraction"][self.__UI]

    def __calculate_impact(self):
        """
        Calculate Impact
        """
        # First we have to calculate ISS
        ISS = 1 - ((1 - parameters_value["ConfidentialityImpact"][self.__CI])
                   * (1 - parameters_value["IntegrityImpact"][self.__II])
                   * (1 - parameters_value["AvailabilityImpact"][self.__AI]))

        # now we can calculate impact
        if self.__S == "unchanged":
            self.__impact = 6.42 * ISS
        elif self.__S == "changed":
            self.__impact = 7.52 * (ISS - 0.029) - 3.25 * ((ISS - 0.02) ** 15)

    def __calculate_basescore(self) -> float:
        """
        Calculate CVSS
        """
        # Now we can calculate the BaseScore
        if self.__impact <= 0:
            return 0
        else:
            if self.__S == "unchanged":
                self.__basescore = roundup(min(self.__impact + self.__exploitability, 10), 1)
            elif self.__S == "changed":
                self.__basescore = roundup(min(1.08 * (self.__impact + self.__exploitability), 10), 1)

    def get_efficiency_impact_exploitability(self):
        """
        Use it to sort vulnerabilities and create chain
        :return: Impact / Exploitability
        """
        return self.__impact / self.__exploitability

    # Getter
    def get_impact(self):
        """
        Getter Impact Score
        :return: Impact
        """
        self.__calculate_impact()
        return self.__impact

    def get_exploitability(self):
        """
        Getter Exploitability Score
        :return: Exploitability
        """
        self.__calculate_exploitability()
        return self.__exploitability

    def get_basescore(self):
        """
        Getter Base Score
        :return: Base Score
        """
        self.__calculate_impact()
        self.__calculate_exploitability()
        self.__calculate_basescore()
        return self.__basescore

    def get_attack_vector(self):
        """
        Getter Attack Vector (Network, Adjacent_Network, Local, Physical)
        :return: Attack Vector
        """
        return self.__AV

    def get_attack_complexity(self):
        """
        Getter Attack Complexity (Low, High)
        :return: Attack Complexity
        """
        return self.__AC

    def get_privileges_required(self):
        """
        Getter Privileges Required (None, Low, High)
        :return: Privileges Required
        """
        return self.__PR

    def get_user_interaction(self):
        """
        Getter User Interaction (None, Required)
        :return: User Interaction
        """
        return self.__UI

    def get_scope(self):
        """
        Getter Scope (Changed, Unchanged)
        :return:
        """
        return self.__S

    def get_confidentiality_impact(self):
        """
        Getter Confidentiality Impact (None, Low, High)
        :return: Confidentiality Impact
        """
        return self.__CI

    def get_integrity_impact(self):
        """
        Getter Integrity Impact (None, Low, High)
        :return: Integrity Impact
        """
        return self.__II

    def get_availability_impact(self):
        """
        Getter Availability Impact (None, Low, High)
        :return: Availability Impact
        """
        return self.__AI

    # str method (i don't want to print each members one by one)
    def __str__(self):
        """
        String Method
        :return: AV AC PR UI S - CI II AI
        """
        return (self.__AV + " " + self.__AC + " " + self.__PR + " " + self.__UI + " "
                + self.__S + " " + self.__CI + " " + self.__II + " " + self.__AI)
