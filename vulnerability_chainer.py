from Vulnerability import Vulnerability


def vulnerability_chainer(vulns_list: list) -> None:
    """
    Create a chain of many vulnerabilities and print the basescore of this chain
    :param vulns_list:
    :return: parameters list of the vulnerability
    """
    vulns_object = []

    for i in vulns_list:
        v = Vulnerability(i)

        vulns_object.append([v, v.get_impact() / v.get_exploitability()])

    vulns_object.sort(key=lambda x: x[1])

    for i in range(0, len(vulns_object) - 1):
        if not vulns_object[i][0].can_chain_with(vulns_object[i + 1][0]):
            return

    meta_list = ["", "high", "high", "required", "unchanged", "none", "none", "none"]
    meta_list[0] = vulns_object[0][0].get_attack_vector()

    for vuln in vulns_object:
        AC_value = {"low": 1, "high": 2}
        if AC_value[vuln[0].get_attack_complexity()] < AC_value[meta_list[1]]:
            meta_list[1] = vuln[0].get_attack_complexity()

        PR_value = {"none": 1, "low": 2, "high": 3}
        if PR_value[vuln[0].get_privileges_required()] < PR_value[meta_list[2]]:
            meta_list[2] = vuln[0].get_privileges_required()

        UI_value = {"none": 1, "required": 2}
        if UI_value[vuln[0].get_user_interaction()] < UI_value[meta_list[3]]:
            meta_list[3] = vuln[0].get_user_interaction()

        if vuln[0].get_scope() == "changed":
            meta_list[4] = "changed"

        impact_value = {"none": 1, "low": 2, "high": 3}
        if impact_value[vuln[0].get_confidentiality_impact()] > impact_value[meta_list[5]]:
            meta_list[5] = vuln[0].get_confidentiality_impact()

        if impact_value[vuln[0].get_integrity_impact()] > impact_value[meta_list[6]]:
            meta_list[6] = vuln[0].get_integrity_impact()

        if impact_value[vuln[0].get_availability_impact()] > impact_value[meta_list[7]]:
            meta_list[7] = vuln[0].get_availability_impact()

    meta_vuln = Vulnerability(meta_list)

    print(meta_vuln.get_basescore())
